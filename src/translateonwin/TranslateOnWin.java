/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package translateonwin;

import java.awt.AWTException;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import javax.swing.ButtonGroup;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

public class TranslateOnWin extends javax.swing.JFrame {

    /**
     * Creates new form TranslateOnWin
     */
    private Vector<Language> vLang;
    private String[] signs;
    private Vector displayMember;
    private Clipboard clbr = null;
    private Vector<String[]> undoList = null;
    private int count;
    private TrayIcon trayicon;
    private SystemTray tray;
    private StringReplace strReplace;

    public JComboBox getCbbFrom() {
        return cbbFrom;
    }

    public JComboBox getCbbTo() {
        return cbbTo;
    }

    public JTextArea getTxtFrom() {
        return txtFrom;
    }

    public JTextArea getTxtTo() {
        return txtTo;
    }

    public TranslateOnWin() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            this.getContentPane().setBackground(new Color(245, 245, 245));
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(TranslateOnWin.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        initCombobox();
        strReplace = new StringReplace();
        AddOn();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtFrom = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtTo = new javax.swing.JTextArea();
        jToolBar1 = new javax.swing.JToolBar();
        btnCopy = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnPaste = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        btnCut = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        btnNext = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        btnChangeLang = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cbbFrom = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cbbTo = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        btnSpeaker = new javax.swing.JButton();
        btnTranslate = new javax.swing.JButton();
        btnWiki = new javax.swing.JButton();
        cbOnTop = new javax.swing.JCheckBox();
        cbSynchro = new javax.swing.JCheckBox();
        rdbGoogle = new javax.swing.JRadioButton();
        jLabel13 = new javax.swing.JLabel();
        rdbMicr = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        Main = new javax.swing.JMenu();
        jHideMI = new javax.swing.JMenuItem();
        jSettingMI = new javax.swing.JMenuItem();
        jExitMI = new javax.swing.JMenuItem();
        Edit = new javax.swing.JMenu();
        jBackMenuItem = new javax.swing.JMenuItem();
        jForwardMenuItem = new javax.swing.JMenuItem();
        jNewMenuItem = new javax.swing.JMenuItem();
        jCutMenuItem = new javax.swing.JMenuItem();
        jCopyMenuItem = new javax.swing.JMenuItem();
        jPasteMenuItem = new javax.swing.JMenuItem();
        jReplaceMenuItem = new javax.swing.JMenuItem();
        Dict = new javax.swing.JMenu();
        jLanguageMI = new javax.swing.JMenuItem();
        Wikipedia = new javax.swing.JMenu();
        View = new javax.swing.JMenu();
        jAutosizeMI = new javax.swing.JMenuItem();
        jEditableResultMI = new javax.swing.JMenuItem();
        JAutoCompMI = new javax.swing.JMenuItem();
        JOnTopMI = new javax.swing.JMenuItem();
        JSynchrMI = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Google Translate On Desktop");
        setBackground(new java.awt.Color(214, 217, 223));
        setIconImages(null);
        setMaximumSize(new java.awt.Dimension(2147483647, 370));
        setMinimumSize(new java.awt.Dimension(671, 366));
        setResizable(false);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        txtFrom.setColumns(20);
        txtFrom.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtFrom.setLineWrap(true);
        txtFrom.setRows(5);
        txtFrom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFromKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(txtFrom);

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));

        txtTo.setEditable(false);
        txtTo.setColumns(20);
        txtTo.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtTo.setLineWrap(true);
        txtTo.setRows(5);
        jScrollPane2.setViewportView(txtTo);

        jToolBar1.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar1.setBorder(null);
        jToolBar1.setFloatable(false);
        jToolBar1.setBorderPainted(false);
        jToolBar1.setOpaque(false);

        btnCopy.setBackground(new java.awt.Color(245, 245, 245));
        btnCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/translateonwin/icon/copy.png"))); // NOI18N
        btnCopy.setToolTipText("Copy text to clipboard");
        btnCopy.setBorderPainted(false);
        btnCopy.setFocusable(false);
        btnCopy.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCopy.setMargin(null);
        btnCopy.setMaximumSize(new java.awt.Dimension(24, 25));
        btnCopy.setMinimumSize(new java.awt.Dimension(24, 25));
        btnCopy.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCopy);

        jLabel1.setText("   ");
        jToolBar1.add(jLabel1);

        btnPaste.setBackground(new java.awt.Color(245, 245, 245));
        btnPaste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/translateonwin/icon/gnome_edit_paste.png"))); // NOI18N
        btnPaste.setToolTipText("Paste from clipboard");
        btnPaste.setBorderPainted(false);
        btnPaste.setEnabled(false);
        btnPaste.setFocusable(false);
        btnPaste.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPaste.setMargin(null);
        btnPaste.setMaximumSize(new java.awt.Dimension(23, 24));
        btnPaste.setMinimumSize(new java.awt.Dimension(23, 24));
        btnPaste.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPasteActionPerformed(evt);
            }
        });
        jToolBar1.add(btnPaste);

        jLabel4.setText("   ");
        jToolBar1.add(jLabel4);

        btnCut.setBackground(new java.awt.Color(245, 245, 245));
        btnCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/translateonwin/icon/cut.png"))); // NOI18N
        btnCut.setToolTipText("Cut");
        btnCut.setBorderPainted(false);
        btnCut.setFocusable(false);
        btnCut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCut.setMargin(null);
        btnCut.setMaximumSize(new java.awt.Dimension(23, 24));
        btnCut.setMinimumSize(new java.awt.Dimension(23, 24));
        btnCut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCutActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCut);

        jLabel2.setText("   ");
        jToolBar1.add(jLabel2);

        btnRefresh.setBackground(new java.awt.Color(245, 245, 245));
        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/translateonwin/icon/refresh.png"))); // NOI18N
        btnRefresh.setToolTipText("Refresh");
        btnRefresh.setBorderPainted(false);
        btnRefresh.setFocusable(false);
        btnRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRefresh.setMargin(null);
        btnRefresh.setMaximumSize(new java.awt.Dimension(23, 24));
        btnRefresh.setMinimumSize(new java.awt.Dimension(23, 24));
        btnRefresh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        jToolBar1.add(btnRefresh);

        jLabel3.setText("   ");
        jLabel3.setMaximumSize(new java.awt.Dimension(10, 14));
        jLabel3.setMinimumSize(new java.awt.Dimension(10, 14));
        jToolBar1.add(jLabel3);

        btnBack.setBackground(new java.awt.Color(245, 245, 245));
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/translateonwin/icon/left.png"))); // NOI18N
        btnBack.setToolTipText("Back");
        btnBack.setBorderPainted(false);
        btnBack.setEnabled(false);
        btnBack.setFocusable(false);
        btnBack.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnBack.setMargin(null);
        btnBack.setMaximumSize(new java.awt.Dimension(23, 24));
        btnBack.setMinimumSize(new java.awt.Dimension(23, 24));
        btnBack.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        jToolBar1.add(btnBack);

        jLabel8.setText("   ");
        jLabel8.setMaximumSize(new java.awt.Dimension(10, 14));
        jLabel8.setMinimumSize(new java.awt.Dimension(10, 14));
        jToolBar1.add(jLabel8);

        btnNext.setBackground(new java.awt.Color(245, 245, 245));
        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/translateonwin/icon/right.png"))); // NOI18N
        btnNext.setToolTipText("Next");
        btnNext.setBorderPainted(false);
        btnNext.setEnabled(false);
        btnNext.setFocusable(false);
        btnNext.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNext.setMargin(null);
        btnNext.setMaximumSize(new java.awt.Dimension(23, 24));
        btnNext.setMinimumSize(new java.awt.Dimension(23, 24));
        btnNext.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        jToolBar1.add(btnNext);

        jLabel5.setText("   ");
        jToolBar1.add(jLabel5);

        btnChangeLang.setBackground(new java.awt.Color(245, 245, 245));
        btnChangeLang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/translateonwin/icon/globe_connected.png"))); // NOI18N
        btnChangeLang.setToolTipText("Change language");
        btnChangeLang.setBorderPainted(false);
        btnChangeLang.setFocusable(false);
        btnChangeLang.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnChangeLang.setMargin(null);
        btnChangeLang.setMaximumSize(new java.awt.Dimension(23, 24));
        btnChangeLang.setMinimumSize(new java.awt.Dimension(23, 24));
        btnChangeLang.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnChangeLang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeLangActionPerformed(evt);
            }
        });
        jToolBar1.add(btnChangeLang);

        jLabel6.setText("   ");
        jToolBar1.add(jLabel6);

        jLabel14.setText("From:");
        jToolBar1.add(jLabel14);

        jLabel10.setText("   ");
        jToolBar1.add(jLabel10);

        cbbFrom.setMaximumSize(new java.awt.Dimension(100, 20));
        cbbFrom.setMinimumSize(new java.awt.Dimension(100, 20));
        cbbFrom.setPreferredSize(new java.awt.Dimension(100, 20));
        jToolBar1.add(cbbFrom);

        jLabel7.setText("   ");
        jToolBar1.add(jLabel7);

        jLabel11.setText("To:");
        jToolBar1.add(jLabel11);

        jLabel12.setText("   ");
        jToolBar1.add(jLabel12);

        cbbTo.setBorder(null);
        cbbTo.setMaximumSize(new java.awt.Dimension(100, 20));
        cbbTo.setMinimumSize(new java.awt.Dimension(100, 20));
        cbbTo.setPreferredSize(new java.awt.Dimension(100, 20));
        jToolBar1.add(cbbTo);

        jLabel9.setText("   ");
        jToolBar1.add(jLabel9);

        btnSpeaker.setBackground(new java.awt.Color(245, 245, 245));
        btnSpeaker.setIcon(new javax.swing.ImageIcon(getClass().getResource("/translateonwin/icon/audio_volume_low.png"))); // NOI18N
        btnSpeaker.setToolTipText("Speak");
        btnSpeaker.setBorderPainted(false);
        btnSpeaker.setFocusable(false);
        btnSpeaker.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSpeaker.setMargin(null);
        btnSpeaker.setMaximumSize(new java.awt.Dimension(23, 24));
        btnSpeaker.setMinimumSize(new java.awt.Dimension(23, 24));
        btnSpeaker.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnSpeaker);

        btnTranslate.setBackground(new java.awt.Color(245, 245, 245));
        btnTranslate.setText("Translate");
        btnTranslate.setBorderPainted(false);
        btnTranslate.setFocusable(false);
        btnTranslate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTranslate.setMaximumSize(new java.awt.Dimension(70, 20));
        btnTranslate.setMinimumSize(new java.awt.Dimension(70, 20));
        btnTranslate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnTranslate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTranslateActionPerformed(evt);
            }
        });
        jToolBar1.add(btnTranslate);

        btnWiki.setBackground(new java.awt.Color(245, 245, 245));
        btnWiki.setIcon(new javax.swing.ImageIcon(getClass().getResource("/translateonwin/icon/wikipedia_icon.png"))); // NOI18N
        btnWiki.setToolTipText("Wikipedia");
        btnWiki.setBorderPainted(false);
        btnWiki.setFocusable(false);
        btnWiki.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnWiki.setMargin(null);
        btnWiki.setMaximumSize(new java.awt.Dimension(23, 24));
        btnWiki.setMinimumSize(new java.awt.Dimension(23, 24));
        btnWiki.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnWiki.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWikiActionPerformed(evt);
            }
        });
        jToolBar1.add(btnWiki);

        cbOnTop.setBackground(new java.awt.Color(245, 245, 245));
        cbOnTop.setMnemonic('O');
        cbOnTop.setSelected(true);
        cbOnTop.setText("On Top");
        cbOnTop.setToolTipText("Always show on desktop");
        cbOnTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOnTopActionPerformed(evt);
            }
        });

        cbSynchro.setBackground(new java.awt.Color(245, 245, 245));
        cbSynchro.setMnemonic('S');
        cbSynchro.setText("Synchro");
        cbSynchro.setToolTipText("Synchronization translation");

        rdbGoogle.setBackground(new java.awt.Color(245, 245, 245));
        rdbGoogle.setMnemonic('G');
        rdbGoogle.setSelected(true);
        rdbGoogle.setText("Google");
        rdbGoogle.setBorder(null);

        jLabel13.setBackground(new java.awt.Color(214, 217, 223));
        jLabel13.setText("Translator: ");

        rdbMicr.setBackground(new java.awt.Color(245, 245, 245));
        rdbMicr.setMnemonic('M');
        rdbMicr.setText("Microsoft");
        rdbMicr.setBorder(null);

        jMenuBar1.setBackground(new java.awt.Color(255, 255, 255));

        Main.setMnemonic('M');
        Main.setText("Main");

        jHideMI.setMnemonic('H');
        jHideMI.setText("Hide");
        jHideMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jHideMIActionPerformed(evt);
            }
        });
        Main.add(jHideMI);

        jSettingMI.setMnemonic('t');
        jSettingMI.setText("Setting");
        Main.add(jSettingMI);

        jExitMI.setMnemonic('x');
        jExitMI.setText("Exit");
        jExitMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jExitMIActionPerformed(evt);
            }
        });
        Main.add(jExitMI);

        jMenuBar1.add(Main);

        Edit.setMnemonic('E');
        Edit.setText("Edit");

        jBackMenuItem.setMnemonic('B');
        jBackMenuItem.setText("Back");
        jBackMenuItem.setEnabled(false);
        jBackMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBackMenuItemActionPerformed(evt);
            }
        });
        Edit.add(jBackMenuItem);

        jForwardMenuItem.setMnemonic('F');
        jForwardMenuItem.setText("Forward");
        jForwardMenuItem.setEnabled(false);
        jForwardMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jForwardMenuItemActionPerformed(evt);
            }
        });
        Edit.add(jForwardMenuItem);

        jNewMenuItem.setMnemonic('N');
        jNewMenuItem.setText("New");
        jNewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNewMenuItemActionPerformed(evt);
            }
        });
        Edit.add(jNewMenuItem);

        jCutMenuItem.setMnemonic('u');
        jCutMenuItem.setText("Cut");
        jCutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCutMenuItemActionPerformed(evt);
            }
        });
        Edit.add(jCutMenuItem);

        jCopyMenuItem.setMnemonic('C');
        jCopyMenuItem.setText("Copy");
        jCopyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCopyMenuItemActionPerformed(evt);
            }
        });
        Edit.add(jCopyMenuItem);

        jPasteMenuItem.setMnemonic('p');
        jPasteMenuItem.setText("Paste");
        jPasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasteMenuItemActionPerformed(evt);
            }
        });
        Edit.add(jPasteMenuItem);

        jReplaceMenuItem.setMnemonic('R');
        jReplaceMenuItem.setText("Replace");
        jReplaceMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jReplaceMenuItemActionPerformed(evt);
            }
        });
        Edit.add(jReplaceMenuItem);

        jMenuBar1.add(Edit);

        Dict.setMnemonic('D');
        Dict.setText("Dictionary");

        jLanguageMI.setMnemonic('L');
        jLanguageMI.setText("Language");
        jLanguageMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLanguageMIActionPerformed(evt);
            }
        });
        Dict.add(jLanguageMI);

        jMenuBar1.add(Dict);

        Wikipedia.setMnemonic('W');
        Wikipedia.setText("Wikipedia");
        jMenuBar1.add(Wikipedia);

        View.setMnemonic('v');
        View.setText("View");

        jAutosizeMI.setMnemonic('S');
        jAutosizeMI.setText("Auto Size");
        View.add(jAutosizeMI);

        jEditableResultMI.setMnemonic('d');
        jEditableResultMI.setText("Editable Result");
        jEditableResultMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEditableResultMIActionPerformed(evt);
            }
        });
        View.add(jEditableResultMI);

        JAutoCompMI.setMnemonic('C');
        JAutoCompMI.setText("Auto Complete");
        View.add(JAutoCompMI);

        JOnTopMI.setMnemonic('O');
        JOnTopMI.setText("Alway On Top");
        View.add(JOnTopMI);

        JSynchrMI.setMnemonic('y');
        JSynchrMI.setText("Synchronization");
        JSynchrMI.setToolTipText("");
        JSynchrMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JSynchrMIActionPerformed(evt);
            }
        });
        View.add(JSynchrMI);

        jMenuBar1.add(View);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 699, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1))
                .addGap(5, 5, 5))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbOnTop)
                .addGap(10, 10, 10)
                .addComponent(cbSynchro)
                .addGap(26, 26, 26)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbGoogle)
                .addGap(10, 10, 10)
                .addComponent(rdbMicr)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdbMicr, javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(rdbGoogle, javax.swing.GroupLayout.Alignment.CENTER))
                .addGap(9, 9, 9))
            .addGroup(javax.swing.GroupLayout.Alignment.CENTER, layout.createSequentialGroup()
                .addGap(317, 317, 317)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbOnTop)
                    .addComponent(cbSynchro))
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtFromKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFromKeyReleased
        //Translate synchronization
        if (cbSynchro.isSelected()) {
            Translate();
        }
    }//GEN-LAST:event_txtFromKeyReleased

    private void btnTranslateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTranslateActionPerformed
        Translate();
        

    }//GEN-LAST:event_btnTranslateActionPerformed

    private void btnCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyActionPerformed
        CopyToClbr(false);
    }//GEN-LAST:event_btnCopyActionPerformed

    private void btnChangeLangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeLangActionPerformed
        // TODO add your handling code here:
        String cbbFromSelected = cbbFrom.getSelectedItem().toString();
        String cbbToSelected = cbbTo.getSelectedItem().toString();
        String tmp = cbbFromSelected;
        cbbFrom.setSelectedItem(cbbToSelected);
        cbbTo.setSelectedItem(tmp);
    }//GEN-LAST:event_btnChangeLangActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        RefreshAction();

    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnWikiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWikiActionPerformed
        SearchWiki();
    }//GEN-LAST:event_btnWikiActionPerformed

    private void btnPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPasteActionPerformed
        PasteFromClbr();
    }//GEN-LAST:event_btnPasteActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        BackAction();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        NextAction();
    }//GEN-LAST:event_btnNextActionPerformed

    private void jLanguageMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLanguageMIActionPerformed
        // TODO add your handling code here:
        SelectLanguage selectLanguage = new SelectLanguage(this, rootPaneCheckingEnabled);
        selectLanguage.setParent(this);
        selectLanguage.setVisible(true);
    }//GEN-LAST:event_jLanguageMIActionPerformed

    private void jHideMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jHideMIActionPerformed
        try {
            HideToTray();
        } catch (AWTException ex) {
            Logger.getLogger(TranslateOnWin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jHideMIActionPerformed

    private void btnCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCutActionPerformed
        // TODO add your handling code here:
        CopyToClbr(true);

    }//GEN-LAST:event_btnCutActionPerformed

    private void jExitMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExitMIActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jExitMIActionPerformed

    private void jBackMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBackMenuItemActionPerformed
        // TODO add your handling code here:
        BackAction();
    }//GEN-LAST:event_jBackMenuItemActionPerformed

    private void jForwardMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jForwardMenuItemActionPerformed
        // TODO add your handling code here:
        NextAction();
    }//GEN-LAST:event_jForwardMenuItemActionPerformed

    private void jNewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNewMenuItemActionPerformed
        // TODO add your handling code here:
        RefreshAction();
    }//GEN-LAST:event_jNewMenuItemActionPerformed

    private void jCutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCutMenuItemActionPerformed
        // TODO add your handling code here:
        CopyToClbr(true);
    }//GEN-LAST:event_jCutMenuItemActionPerformed

    private void jCopyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCopyMenuItemActionPerformed
        // TODO add your handling code here:
        CopyToClbr(false);
    }//GEN-LAST:event_jCopyMenuItemActionPerformed

    private void jPasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasteMenuItemActionPerformed
        // TODO add your handling code here:
        PasteFromClbr();
    }//GEN-LAST:event_jPasteMenuItemActionPerformed

    private void jReplaceMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jReplaceMenuItemActionPerformed
        // TODO add your handling code here:
        strReplace.setTxtFrom(txtFrom.getText().toString());
        Replace replace = new Replace(this, rootPaneCheckingEnabled, strReplace);
        replace.setVisible(true);
        txtFrom.setText(strReplace.getTxtResult());
    }//GEN-LAST:event_jReplaceMenuItemActionPerformed

    private void jEditableResultMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEditableResultMIActionPerformed
        // TODO add your handling code here:
        txtTo.setEditable(true);
    }//GEN-LAST:event_jEditableResultMIActionPerformed

    private void JSynchrMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JSynchrMIActionPerformed
        // TODO add your handling code here:
        cbSynchro.setSelected(true);
    }//GEN-LAST:event_JSynchrMIActionPerformed

    private void cbOnTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOnTopActionPerformed
        // TODO add your handling code here:
        if (cbOnTop.isSelected()) {
            this.setAlwaysOnTop(true);
        } else {
            this.setAlwaysOnTop(false);
        }
    }//GEN-LAST:event_cbOnTopActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TranslateOnWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TranslateOnWin().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Dict;
    private javax.swing.JMenu Edit;
    private javax.swing.JMenuItem JAutoCompMI;
    private javax.swing.JMenuItem JOnTopMI;
    private javax.swing.JMenuItem JSynchrMI;
    private javax.swing.JMenu Main;
    private javax.swing.JMenu View;
    private javax.swing.JMenu Wikipedia;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnChangeLang;
    private javax.swing.JButton btnCopy;
    private javax.swing.JButton btnCut;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPaste;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSpeaker;
    private javax.swing.JButton btnTranslate;
    private javax.swing.JButton btnWiki;
    private javax.swing.JCheckBox cbOnTop;
    private javax.swing.JCheckBox cbSynchro;
    private javax.swing.JComboBox cbbFrom;
    private javax.swing.JComboBox cbbTo;
    private javax.swing.JMenuItem jAutosizeMI;
    private javax.swing.JMenuItem jBackMenuItem;
    private javax.swing.JMenuItem jCopyMenuItem;
    private javax.swing.JMenuItem jCutMenuItem;
    private javax.swing.JMenuItem jEditableResultMI;
    private javax.swing.JMenuItem jExitMI;
    private javax.swing.JMenuItem jForwardMenuItem;
    private javax.swing.JMenuItem jHideMI;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jLanguageMI;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jNewMenuItem;
    private javax.swing.JMenuItem jPasteMenuItem;
    private javax.swing.JMenuItem jReplaceMenuItem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem jSettingMI;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JRadioButton rdbGoogle;
    private javax.swing.JRadioButton rdbMicr;
    private javax.swing.JTextArea txtFrom;
    private javax.swing.JTextArea txtTo;
    // End of variables declaration//GEN-END:variables

    private void initCombobox() {
        signs = Locale.getISOLanguages();
        vLang = new Vector<>();
        displayMember = new Vector();
        Language autoDetect = new Language("Auto Detect", "auto");
        vLang.add(autoDetect);
        for (int i = 0; i < signs.length; i++) {
            Locale locale = new Locale(signs[i]);
            String lang = locale.getDisplayLanguage();
            Language language = new Language(lang, signs[i]);
            vLang.add(language);
        }
        for (int i = 0; i < vLang.size(); i++) {
            String node = vLang.get(i).getLanguage();
            displayMember.add(node);
        }
        DefaultComboBoxModel model = new DefaultComboBoxModel(displayMember);
        DefaultComboBoxModel model2 = new DefaultComboBoxModel(displayMember);

        cbbFrom.setModel(model);
        cbbFrom.setSelectedItem("Vietnamese");
        cbbTo.setModel(model2);
        cbbTo.setSelectedItem("English");
    }

    private void AddOn() {
        ButtonGroup btnGroup = new ButtonGroup();
        btnGroup.add(rdbGoogle);
        btnGroup.add(rdbMicr);
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/translateonwin/icon/google.png")));
    }

    private String getValueMember(String cbbSelected) {
        String lang = null;
        for (int i = 0; i < vLang.size(); i++) {
            if (vLang.get(i).getLanguage().equals(cbbSelected)) {
                lang = vLang.get(i).getSign();
            }
        }
        return lang;
    }

    private void Translate() {
        String cbbFromSelected = cbbFrom.getSelectedItem().toString();
        String fromLang = getValueMember(cbbFromSelected);
        String cbbToSelected = cbbTo.getSelectedItem().toString();
        String toLang = getValueMember(cbbToSelected);
        String text = txtFrom.getText();
        Translator trans = new Translator(text, fromLang, toLang, txtTo);
        Thread thread = new Thread(trans);
        thread.start();
        UndoManager();
    }

    private void UndoManager() {
        if (undoList == null) {
            undoList = new Vector<>(10);
        }
        if (undoList.size() < 10) {
            undoList.add(new String[]{txtFrom.getText(), cbbFrom.getSelectedItem().toString(), cbbTo.getSelectedItem().toString()});
        } else {
            undoList.remove(0);
            undoList.add(new String[]{txtFrom.getText(), cbbFrom.getSelectedItem().toString(), cbbTo.getSelectedItem().toString()});
        }
        count = undoList.size() - 1;
        if (count > 0) {
            btnBack.setEnabled(true);
            jBackMenuItem.setEnabled(true);
        }
    }

    private void CopyToClbr(Boolean isCut) {
        // TODO add your handling code here:
        String text = "";
        if (txtFrom.getSelectedText() != null) {
            text = txtFrom.getSelectedText();
            if (isCut) {
                txtFrom.setText("");
            }
        } 
        if (txtTo.getSelectedText() != null) {
            text = txtTo.getSelectedText();
            if (isCut) {
                txtTo.setText("");
            }
        }
        StringSelection selection = new StringSelection(text);
        if (clbr == null) {
            clbr = Toolkit.getDefaultToolkit().getSystemClipboard();
        }
        clbr.setContents(selection, null);
        if (text != "") {
            btnPaste.setEnabled(true);
        }
    }

    private void SearchWiki() throws HeadlessException {
        try {
            // TODO add your handling code here:
            String text = txtFrom.getText();
            String cbbFromSelected = cbbFrom.getSelectedItem().toString();
            String fromLang = getValueMember(cbbFromSelected);
            String address = fromLang + ".wikipedia.org";
            URI uriText = new URI(null, null, text, null);
            URI uri = new URI("http://" + "www." + address + "/wiki/" + uriText.toString());
            Desktop desk = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
            if (desk != null) {
                desk.browse(uri);
            }
        } catch (URISyntaxException ex) {
            JOptionPane.showMessageDialog(rootPane, "Cannot open browser!");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, "URI Invalid!");
        }
    }

    private void PasteFromClbr() {
        // TODO add your handling code here:
        if (clbr != null) {
            String paste = "";
            Transferable transferable = clbr.getContents(null);
            if (transferable != null && transferable.isDataFlavorSupported(DataFlavor.stringFlavor)) {
                try {
                    paste = (String) transferable.getTransferData(DataFlavor.stringFlavor);
                } catch (        UnsupportedFlavorException | IOException ex) {
                    Logger.getLogger(TranslateOnWin.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            txtFrom.setText(txtFrom.getText() + paste);
        }
    }

    private void BackAction() {
        // TODO add your handling code here:
        if (undoList != null) {
            count--;
            if (count >= 0) {
                String text = (((String[]) undoList.get(count))[0]);
                String from = (((String[]) undoList.get(count))[1]);
                String fromLang = getValueMember(from);
                String to = (((String[]) undoList.get(count))[2]);
                String toLang = getValueMember(to);
                Translator trans = new Translator(text, fromLang, toLang, txtTo);
                txtFrom.setText(text);
                cbbFrom.setSelectedItem(from);
                cbbTo.setSelectedItem(to);
                new Thread(trans).start();
            }
            if (count == 0) {
                btnBack.setEnabled(false);
                jBackMenuItem.setEnabled(false);
            }
            if (count < undoList.size() - 1) {
                btnNext.setEnabled(true);
                jForwardMenuItem.setEnabled(true);
            }
        }
    }

    private void NextAction() {
        // TODO add your handling code here:
        count++;
        if (count <= undoList.size() - 1) {
            String text = (((String[]) undoList.get(count))[0]);
            String from = (((String[]) undoList.get(count))[1]);
            String fromLang = getValueMember(from);
            String to = (((String[]) undoList.get(count))[2]);
            String toLang = getValueMember(to);
            Translator trans = new Translator(text, fromLang, toLang, txtTo);
            txtFrom.setText(text);
            cbbFrom.setSelectedItem(from);
            cbbTo.setSelectedItem(to);
            new Thread(trans).start();
        }
        if (count == undoList.size() - 1) {
            btnNext.setEnabled(false);
            jForwardMenuItem.setEnabled(true);
        }
        if (count > 0) {
            btnBack.setEnabled(true);
            jBackMenuItem.setEnabled(true);
        }
    }

    private void HideToTray() throws AWTException {
        PopupMenu pm = new PopupMenu();
        tray = SystemTray.getSystemTray();
        MenuItem itemShow = new MenuItem("Show");
        itemShow.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setVisible(true);
                if (trayicon != null) {
                    tray.remove(trayicon);
                }
            }
        });
        MenuItem itemExit = new MenuItem("Exit");
        itemExit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });
        pm.add(itemShow);
        pm.add(itemExit);

        Image icon = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/translateonwin/icon/google.png"));

        trayicon = new TrayIcon(icon, "Google Translate On Win", pm);
        trayicon.setImageAutoSize(true);
        setVisible(false);
        tray.add(trayicon);
    }

    private void RefreshAction() {
        // TODO add your handling code here:
        txtFrom.setText("");
        txtTo.setText("");
        String text = "";
        StringSelection selection = new StringSelection(text);
        if (clbr == null) {
            clbr = Toolkit.getDefaultToolkit().getSystemClipboard();
        }
        clbr.setContents(selection, null);
    }
}
